<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>Babylon.js sample code</title>

    <!-- Babylon.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js"></script>
    <script src="https://assets.babylonjs.com/generated/Assets.js"></script>
    <script src="https://cdn.babylonjs.com/recast.js"></script>
    <script src="https://cdn.babylonjs.com/ammo.js"></script>
    <script src="https://cdn.babylonjs.com/havok/HavokPhysics_umd.js"></script>
    <script src="https://cdn.babylonjs.com/cannon.js"></script>
    <script src="https://cdn.babylonjs.com/Oimo.js"></script>
    <script src="https://cdn.babylonjs.com/earcut.min.js"></script>
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/materialsLibrary/babylonjs.materials.min.js"></script>
    <script src="https://cdn.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js"></script>
    <script src="https://cdn.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.js"></script>
    <script src="https://cdn.babylonjs.com/serializers/babylonjs.serializers.min.js"></script>
    <script src="https://cdn.babylonjs.com/gui/babylon.gui.min.js"></script>
    <script src="https://cdn.babylonjs.com/inspector/babylon.inspector.bundle.js"></script>

    <style>
      html, body {
        overflow: hidden;
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
      }

      #renderCanvas {
        width: 100%;
        height: 100%;
        touch-action: none;
      }
      
      #canvasZone {
        width: 100%;
        height: 100%;
      }
    </style>
  </head>
<body>
  <div id="canvasZone"><canvas id="renderCanvas"></canvas></div>
  <script>
    var canvas = document.getElementById("renderCanvas");

    var startRenderLoop = function (engine, canvas) {
      engine.runRenderLoop(function () {
        if (sceneToRender && sceneToRender.activeCamera) {
          sceneToRender.render();
        }
      });
    }

    var engine = null;
    var scene = null;
    var sceneToRender = null;
    var createDefaultEngine = function() {
      return new BABYLON.Engine(canvas, true, {
        preserveDrawingBuffer: true, stencil: true,  disableWebGL2Support: false
      });
    };

    var url = "https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js";
    var s = document.createElement("script");
    s.src = url;
    document.head.appendChild(s);

    var createScene = function() {
      var scene = new BABYLON.Scene(engine);
      scene.clearColor = new BABYLON.Color4(0.2, 0.4, 0.75, 1.0);
   
      var camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 5, -10), scene);    
      camera.attachControl(canvas, true);

      var light = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(0.8, 1.0, 0.0), scene);
      light.intensity = 0.75;
      light.specular = BABYLON.Color3.Black();

      var terrainMaterial = new BABYLON.StandardMaterial("materialGround", scene);
      terrainMaterial.diffuseColor = new BABYLON.Color3(0.15, 0.9, 0.25);
      //terrainMaterial.wireframe = true;

      var terrainCreated = false;
      var terrain;

      s.onload = function() {
        var mapSubX = 500;
        var mapSubZ = 300;
        var terrainSub = 100;

        // map creation
        var mapData = new Float32Array(mapSubX * mapSubZ * 3);   
        for (var l = 0; l < mapSubZ; l++) {           
          for (var w = 0; w < mapSubX; w++) {                
            mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;
            mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin(l / 2) * Math.cos(w / 2) * 2.0;
            mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;
           }            
        }

        // terrain creation
        var params = {
          mapData: mapData,
          mapSubX: mapSubX,
          mapSubZ: mapSubZ,
          terrainSub: terrainSub
        };

        terrain = new BABYLON.DynamicTerrain("terrain", params, scene);
        terrain.mesh.material = terrainMaterial;
        terrain.subToleranceX = 8;
        terrain.subToleranceZ = 8;
        terrain.LODLimits = [4, 3, 2, 1, 1];
        terrainCreated = true;
      };

      var camElevation = 2.0;
      var camAltitude = 0.0;
      scene.registerBeforeRender(function() {
        if (terrainCreated) {
          camAltitude = terrain.getHeightFromMap(camera.position.x, camera.position.z) + camElevation;
          camera.position.y = camAltitude;
        }
      });

      return scene;
    };

    window.initFunction = async function() {
      var asyncEngineCreation = async function() {
        try {
          return createDefaultEngine();
        } catch(e) {
          console.log("the available createEngine function failed. Creating the default engine instead");
          return createDefaultEngine();
        }
      }

      window.engine = await asyncEngineCreation();
      if (!engine) throw 'engine should not be null.';
      startRenderLoop(engine, canvas);
      window.scene = createScene();
    };

    initFunction().then(() => {
      sceneToRender = scene
    });

    // Resize
    window.addEventListener("resize", function () {
      engine.resize();
    });
  </script>
</body>
</html>
